<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>My Blog</title>
    <link>http://localhost:1313/</link>
    <description>Recent content on My Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 27 Dec 2019 13:30:52 +0800</lastBuildDate>
    
        <atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>About</title>
      <link>http://localhost:1313/about/</link>
      <pubDate>Sun, 20 Aug 2017 21:38:52 +0800</pubDate>
      
      <guid>http://localhost:1313/about/</guid>
      
        <description>&lt;p&gt;Hugo is a static site engine written in Go.&lt;/p&gt;

&lt;p&gt;It makes use of a variety of open source projects including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spf13/cobra&#34;&gt;Cobra&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spf13/viper&#34;&gt;Viper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spf13/jWalterWeatherman&#34;&gt;J Walter Weatherman&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spf13/cast&#34;&gt;Cast&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Learn more and contribute on &lt;a href=&#34;https://github.com/gohugoio&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Vue 中的 .sync 修饰符</title>
      <link>http://localhost:1313/post/vue-%E4%B8%AD%E7%9A%84-.sync-%E4%BF%AE%E9%A5%B0%E7%AC%A6/</link>
      <pubDate>Fri, 27 Dec 2019 13:30:52 +0800</pubDate>
      
      <guid>http://localhost:1313/post/vue-%E4%B8%AD%E7%9A%84-.sync-%E4%BF%AE%E9%A5%B0%E7%AC%A6/</guid>
      
        <description>

&lt;h1 id=&#34;vue-中的-sync-修饰符&#34;&gt;Vue 中的 .sync 修饰符&lt;/h1&gt;

&lt;p&gt;.sync 修饰符可以用下面的代码案例来解释。儿子花钱，要问父亲要钱的例子。&lt;/p&gt;

&lt;h3 id=&#34;parent-vue-代码如下&#34;&gt;parent.vue 代码如下&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;template&amp;gt;
  &amp;lt;div&amp;gt;
    {{total}}
    &amp;lt;hr&amp;gt;
    &amp;lt;child :money=&amp;quot;total&amp;quot; @update:money=&amp;quot;total=$event&amp;quot;/&amp;gt;
   &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;

import Child from &#39;./child.vue&#39;
export default {

  data(){
    return {
      total:10000,
    }
  },
  components:{Child}



}
&amp;lt;/script&amp;gt;

&amp;lt;style scoped&amp;gt;

&amp;lt;/style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;child-vue-代码如下&#34;&gt;child.vue 代码如下&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;template&amp;gt;
  &amp;lt;div&amp;gt;
    爸爸的钱:{{money}}
    &amp;lt;button @click=&amp;quot;$emit(&#39;update:money&#39;,money-100)&amp;quot;&amp;gt;问爸爸要钱&amp;lt;/button&amp;gt;
  &amp;lt;/div&amp;gt;

&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;


export default {
  props:[&amp;quot;money&amp;quot;]



}
&amp;lt;/script&amp;gt;

&amp;lt;style scoped&amp;gt;

&amp;lt;/style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其中 parent.vue 代码中的&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;child :money=&amp;quot;total&amp;quot; @update:money=&amp;quot;total=$event&amp;quot;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以简写为&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; &amp;lt;child :money.sync=&amp;quot;total&amp;quot;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;.sync 说到底就是一个语法糖而已。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Vue 两个版本的区别和使用方法</title>
      <link>http://localhost:1313/post/vue-%E4%B8%A4%E4%B8%AA%E7%89%88%E6%9C%AC%E7%9A%84%E5%8C%BA%E5%88%AB%E5%92%8C%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Tue, 24 Dec 2019 14:30:52 +0800</pubDate>
      
      <guid>http://localhost:1313/post/vue-%E4%B8%A4%E4%B8%AA%E7%89%88%E6%9C%AC%E7%9A%84%E5%8C%BA%E5%88%AB%E5%92%8C%E4%BD%BF%E7%94%A8/</guid>
      
        <description>

&lt;h1 id=&#34;vue-两个版本的区别和使用方法&#34;&gt;Vue 两个版本的区别和使用方法&lt;/h1&gt;

&lt;h3 id=&#34;vue-有-2-个版本-分别为-vue-js-和-vue-runtime-js&#34;&gt;Vue 有 2 个版本，分别为 vue.js 和 vue.runtime.js&lt;/h3&gt;

&lt;p&gt;vue.js 使用 template，代码如下&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;new Vue(
    {
        el:&#39;#app&#39;,
        data():{
            n:0
        },
        template:`
            &amp;lt;div&amp;gt;{{n}}&amp;lt;/div&amp;gt;
        `
    }
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;vue.runtime.js使用单文件组件，比如新建一个demo.vue,代码如下&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;template&amp;gt;
    &amp;lt;div class=&amp;quot;red&amp;quot;&amp;gt;
        {{n}}
        &amp;lt;button @click=&amp;quot;add&amp;quot;&amp;gt;+1
        
        &amp;lt;/button&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;
export default {
    data(){
        return{
            n:0
        }
    },
    methods:{
        add(){
            this.n+=1
        }
    }
}
&amp;lt;/script&amp;gt;

&amp;lt;style scoped&amp;gt;
    .red{
        background: red;
    }
&amp;lt;/style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在main.js中用render函数&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import demo from &#39;./demo.vue&#39;
new Vue({
    el:&#39;#app&#39;,
    render(h){
        h(demo)
    },
})
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;vue-js-为-vue-的完整版&#34;&gt;vue.js 为 Vue 的完整版&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;特点:有编译器&lt;/li&gt;
&lt;li&gt;试图:写在 html 里或者写在 template 选项&lt;/li&gt;
&lt;li&gt;cdn 引入:vue.js&lt;/li&gt;
&lt;li&gt;webpack 引入:需要配置 alias&lt;/li&gt;
&lt;li&gt;@vue/cli 引入:需要额外配置&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;vue-runtime-js-为-vue-非完整版&#34;&gt;vue.runtime.js 为 Vue 非完整版&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;特点:没有编译器&lt;/li&gt;
&lt;li&gt;视图:写在 render 函数里,用 h 来创建标签&lt;/li&gt;
&lt;li&gt;cdn 引入:vue.runtime.js&lt;/li&gt;
&lt;li&gt;webpack 引入:默认使用此版&lt;/li&gt;
&lt;li&gt;@vue/cli 引入:默认使用此版&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;小结：总是使用非完整版,然后配合 vue-loader 和 vue 文件。保证用户体验，用户下载的 JS 文件体积更小，但只支持 h 函数。保证开发体验，开发者可直接在 vue 文件里写 HTML 标签,而不写 h 函数。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>MVC浅析</title>
      <link>http://localhost:1313/post/mvc%E6%B5%85%E6%9E%90/</link>
      <pubDate>Thu, 19 Dec 2019 14:30:52 +0800</pubDate>
      
      <guid>http://localhost:1313/post/mvc%E6%B5%85%E6%9E%90/</guid>
      
        <description>

&lt;h2 id=&#34;mvc浅析&#34;&gt;MVC浅析&lt;/h2&gt;

&lt;h3 id=&#34;一-mvc的三个对象&#34;&gt;一、MVC的三个对象&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;M：Model数据模式，负责操作所有数据&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;V：View视图，负责所有UI界面&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;C：Controller，控制器负责其他&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;代码示例&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import &#39;./app1.css&#39;
import $ from &#39;jquery&#39;

const eventBus = $(window)
// 数据相关都放到m
const m = {
  data: {
    n: parseInt(localStorage.getItem(&#39;n&#39;))
  },
  create() {},
  delete() {},
  update(data) {
    Object.assign(m.data, data)
    eventBus.trigger(&#39;m:updated&#39;)
    localStorage.setItem(&#39;n&#39;, m.data.n)
  },
  get() {}
}
// 视图相关都放到v
const v = {
  el: null,
  html: `
  &amp;lt;div&amp;gt;
    &amp;lt;div class=&amp;quot;output&amp;quot;&amp;gt;
      &amp;lt;span id=&amp;quot;number&amp;quot;&amp;gt;{{n}}&amp;lt;/span&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div class=&amp;quot;actions&amp;quot;&amp;gt;
      &amp;lt;button id=&amp;quot;add1&amp;quot;&amp;gt;+1&amp;lt;/button&amp;gt;
      &amp;lt;button id=&amp;quot;minus1&amp;quot;&amp;gt;-1&amp;lt;/button&amp;gt;
      &amp;lt;button id=&amp;quot;mul2&amp;quot;&amp;gt;*2&amp;lt;/button&amp;gt;
      &amp;lt;button id=&amp;quot;divide2&amp;quot;&amp;gt;÷2&amp;lt;/button&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
`,
  init(container) {
    v.el = $(container)
  },
  render(n) {
    if (v.el.children.length !== 0) v.el.empty()
    $(v.html.replace(&#39;{{n}}&#39;, n))
      .appendTo(v.el)
  }
}
// 其他都c
const c = {
  init(container) {
    v.init(container)
    v.render(m.data.n) // view = render(data)
    c.autoBindEvents()
    eventBus.on(&#39;m:updated&#39;, () =&amp;gt; {
      console.log(&#39;here&#39;)
      v.render(m.data.n)
    })
  },
  events: {
    &#39;click #add1&#39;: &#39;add&#39;,
    &#39;click #minus1&#39;: &#39;minus&#39;,
    &#39;click #mul2&#39;: &#39;mul&#39;,
    &#39;click #divide2&#39;: &#39;div&#39;,
  },
  add() {
    m.update({n: m.data.n + 1})
  },
  minus() {
    m.update({n: m.data.n - 1})
  },
  mul() {
    m.update({n: m.data.n * 2})
  },
  div() {
    m.update({n: m.data.n / 2})
  },
  autoBindEvents() {
    for (let key in c.events) {
      const value = c[c.events[key]]
      const spaceIndex = key.indexOf(&#39; &#39;)
      const part1 = key.slice(0, spaceIndex)
      const part2 = key.slice(spaceIndex + 1)
      v.el.on(part1, part2, value)
    }
  }
}

export default c

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;二-eventbus&#34;&gt;二、EventBus&lt;/h3&gt;

&lt;p&gt;可以进行组件之间的监听和通信&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;EventBus.on（）监听事件&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;eventBus.trigger(&#39;m:updated&#39;)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;EventBus.trigger（）触发事件&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;eventBus.on(&#39;m:updated&#39;,()=&amp;gt;{
 v.render(m.data.n)
})
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;三-表驱动编程&#34;&gt;三、表驱动编程&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;表驱动编程是指从表里面查找信息, 将重复的代码用哈希表的方式去简化&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;四-模块化&#34;&gt;四、模块化&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;模块化就是把不同的功能模块独立，是代码简洁明了&lt;/li&gt;
&lt;/ul&gt;
</description>
      
    </item>
    
    <item>
      <title>jQuery的功能</title>
      <link>http://localhost:1313/post/jquery%E7%9A%84%E5%8A%9F%E8%83%BD/</link>
      <pubDate>Mon, 28 Oct 2019 14:30:52 +0800</pubDate>
      
      <guid>http://localhost:1313/post/jquery%E7%9A%84%E5%8A%9F%E8%83%BD/</guid>
      
        <description>

&lt;h1 id=&#34;jquery的功能&#34;&gt;jQuery的功能&lt;/h1&gt;

&lt;p&gt;1.jQuery 如何获取元素&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(document) //选择整个文档对象

$(&#39;#myId&#39;) //选择ID为myId的网页元素

$(&#39;div.myClass&#39;) // 选择class为myClass的div元素

$(&#39;input[name=first]&#39;) // 选择name属性等于first的input元素

$(&#39;a:first&#39;) //选择网页中第一个a元素

$(&#39;tr:odd&#39;) //选择表格的奇数行

$(&#39;#myForm :input&#39;) // 选择表单中的input元素

$(&#39;div:visible&#39;) //选择可见的div元素

$(&#39;div:gt(2)&#39;) // 选择所有的div元素，除了前三个

$(&#39;div:animated&#39;) // 选择当前处于动画状态的div元素

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2.jQuery 的链式操作是怎样的&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(&#39;div&#39;).find(&#39;h3&#39;).eq(2).html(&#39;Hello&#39;);
//分解开来
$(&#39;div&#39;) //找到div元素

.find(&#39;h3&#39;) //选择其中的h3元素

.eq(2) //选择第3个h3元素

.html(&#39;Hello&#39;); //将它的内容改为Hello
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3.jQuery 如何创建元素&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(&#39;&amp;lt;p&amp;gt;Hello&amp;lt;/p&amp;gt;&#39;);

$(&#39;&amp;lt;li class=&amp;quot;new&amp;quot;&amp;gt;new list item&amp;lt;/li&amp;gt;&#39;);

$(&#39;ul&#39;).append(&#39;&amp;lt;li&amp;gt;list item&amp;lt;/li&amp;gt;&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4.jQuery 如何移动元素&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(&#39;div&#39;).insertAfter($(&#39;p&#39;));
//把div元素移动p元素后面
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;5.jQuery 如何修改元素的属性&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(&amp;quot;.demo&amp;quot;).attr(&amp;quot;_id&amp;quot;,&amp;quot;abc&amp;quot;)//attr可以获取或者给demo上添加自定义的_id属性。

$(&amp;quot;.demo&amp;quot;).addClass(&amp;quot;abc&amp;quot;)
//修改class类名之类的

$(&amp;quot;.demo&amp;quot;).removeClass(&amp;quot;abc&amp;quot;)//删除class
&lt;/code&gt;&lt;/pre&gt;
</description>
      
    </item>
    
    <item>
      <title>JS函数的执行时机</title>
      <link>http://localhost:1313/post/js%E5%87%BD%E6%95%B0%E7%9A%84%E6%89%A7%E8%A1%8C%E6%97%B6%E6%9C%BA/</link>
      <pubDate>Thu, 26 Sep 2019 14:30:52 +0800</pubDate>
      
      <guid>http://localhost:1313/post/js%E5%87%BD%E6%95%B0%E7%9A%84%E6%89%A7%E8%A1%8C%E6%97%B6%E6%9C%BA/</guid>
      
        <description>

&lt;h1 id=&#34;js函数的执行时机&#34;&gt;JS函数的执行时机&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;let i = 0
for(i = 0; i&amp;lt;6; i++){
  setTimeout(()=&amp;gt;{
    console.log(i)
  },0)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;上面的代码会打印出6个6。因为for循环6次后，才会执行setTimeout函数里的打印i数值6次，此时数值i变为6，所以打印6个6。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;让上面代码打印0-1-2-3-4-5-的方法则如下&#34;&gt;让上面代码打印0、1、2、3、4、5 的方法则如下&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;for(let i = 0; i&amp;lt;6; i++){
  setTimeout(()=&amp;gt;{
    console.log(i)
  },0)
}

&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;因为JS在for和let一起用的时候会加东西，每次循环都会多创建一个i，所以打印出来0、1、2、3、4、5&lt;/li&gt;

&lt;li&gt;&lt;p&gt;当然也可以使用自执行函数实现，存下局部变量，代码如下&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;for (var i=0; i&amp;lt;6; i++) {
	    	(function(i){
	        	setTimeout(() =&amp;gt; console.log(i), 0)
	    	})(i)
	    }

&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      
    </item>
    
    <item>
      <title>JS对象</title>
      <link>http://localhost:1313/post/js%E5%AF%B9%E8%B1%A1/</link>
      <pubDate>Sat, 21 Sep 2019 14:30:52 +0800</pubDate>
      
      <guid>http://localhost:1313/post/js%E5%AF%B9%E8%B1%A1/</guid>
      
        <description>

&lt;h1 id=&#34;js对象&#34;&gt;JS对象&lt;/h1&gt;

&lt;h2 id=&#34;对象&#34;&gt;对象&lt;/h2&gt;

&lt;h3 id=&#34;定义&#34;&gt;定义&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;无序的数据激合&lt;/li&gt;
&lt;li&gt;键值对的集合
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;写法&#34;&gt;写法&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;let obj={&amp;lsquo;name&amp;rsquo;:&amp;lsquo;frank&amp;rsquo;,&amp;lsquo;age&amp;rsquo;:19}&lt;/li&gt;
&lt;li&gt;let obj=new Object({&amp;lsquo;name&amp;rsquo;:&amp;lsquo;frank&amp;rsquo;,&amp;lsquo;age&amp;rsquo;:19})&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;细节&#34;&gt;细节&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;键名就算引号省略了,还是字符串&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;删除对象的属性&#34;&gt;删除对象的属性&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;delete obj[&amp;lsquo;name&amp;rsquo;]&lt;/li&gt;
&lt;li&gt;&amp;lsquo;name&amp;rsquo; in obj//表示查找obj对象是否有name的属性&lt;/li&gt;
&lt;li&gt;obj.hasOwnProperty(&amp;lsquo;name&amp;rsquo;)//表示查找obj自身的对象中是否有name属性，不包含原型中的属性。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;查看对象的属性&#34;&gt;查看对象的属性&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Object.keys(obj)&lt;/li&gt;
&lt;li&gt;console.log(obj)&lt;/li&gt;
&lt;li&gt;obj[&amp;lsquo;name&amp;rsquo;]&lt;/li&gt;
&lt;li&gt;obj.name//记住这里的name是字符串&lt;/li&gt;
&lt;li&gt;obj[name]//记住这里的name是变量&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;修改对象的属性&#34;&gt;修改对象的属性&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;改自身obj[&amp;lsquo;name&amp;rsquo;]=&amp;lsquo;jack&amp;rsquo;&lt;/li&gt;
&lt;li&gt;批量修改自身 Object.assign(obj,{age:18,&amp;hellip;})&lt;/li&gt;
&lt;li&gt;改共有属性obj.&lt;strong&gt;proto&lt;/strong&gt;[&amp;lsquo;toString&amp;rsquo;]=&amp;lsquo;xxx&amp;rsquo;&lt;/li&gt;
&lt;li&gt;改共有属性Object.prototype[&amp;lsquo;toString&amp;rsquo;]=&amp;lsquo;xxx&amp;rsquo;&lt;/li&gt;
&lt;li&gt;改原型obj.&lt;strong&gt;proto&lt;/strong&gt;=common&lt;/li&gt;
&lt;li&gt;改原型let obj=Object.create(common)&lt;/li&gt;
&lt;li&gt;注:所有的&lt;strong&gt;proto&lt;/strong&gt;代码都是强烈不推荐的
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;增加对象的属性&#34;&gt;增加对象的属性&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;基本同上:已有属性则改;没有属性则增。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;注意&#34;&gt;注意&lt;/h2&gt;

&lt;h3 id=&#34;name-in-obj和obj-hasownproperty-name-的区别&#34;&gt;&amp;lsquo;name&amp;rsquo; in obj和obj.hasOwnProperty(&amp;lsquo;name&amp;rsquo;) 的区别：&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;in表示obj对象中是否包含name字符串这个键，如果原型链中也有name字符串这个属性名，也可以返回true&lt;/li&gt;
&lt;li&gt;hasOwnProperty则表示在obj对象中是否包含name字符串这个属性名。不从含原型链中查找。
&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      
    </item>
    
    <item>
      <title>JS 的基本语法</title>
      <link>http://localhost:1313/post/js-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</link>
      <pubDate>Wed, 11 Sep 2019 12:30:52 +0800</pubDate>
      
      <guid>http://localhost:1313/post/js-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</guid>
      
        <description>

&lt;h1 id=&#34;js-的基本语法&#34;&gt;JS 的基本语法&lt;/h1&gt;

&lt;h2 id=&#34;表达式与语句&#34;&gt;表达式与语句&lt;/h2&gt;

&lt;h3 id=&#34;表达式&#34;&gt;表达式&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;1+2 表达式的值为 3&lt;/li&gt;
&lt;li&gt;add(1,2)表达式的值为函数的返回值&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;语句&#34;&gt;语句&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;var a =1 是一个语句&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;二者的区别&#34;&gt;二者的区别&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;表达式一般都有值，语句有也可能没有&lt;/li&gt;
&lt;li&gt;语句一般会改变环境(声明，赋值)&lt;/li&gt;
&lt;li&gt;上面两句话不是绝对的&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;标识符&#34;&gt;标识符&lt;/h2&gt;

&lt;h3 id=&#34;规则&#34;&gt;规则&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;第一个字符可以是 Unicode 字母或者\$或_或中文&lt;/li&gt;
&lt;li&gt;后面的字符，除上面所说，还可以有数字&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;if-语句&#34;&gt;if 语句&lt;/h2&gt;

&lt;h3 id=&#34;语法&#34;&gt;语法&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;if(表达式){语句 1}else{语句 2}&lt;/li&gt;
&lt;li&gt;{}在语句只有一句的时候可以省略，不建议这样做&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;变态情况&#34;&gt;变态情况&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;表达式里可以非常变态，如 a=1&lt;/li&gt;
&lt;li&gt;语句 1 里可以非常变态，如嵌套的 if else&lt;/li&gt;
&lt;li&gt;语句 2 里可以非常变态，如嵌套的 if else&lt;/li&gt;

&lt;li&gt;&lt;p&gt;缩进也可以很变态，如面试题常常下套&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a=1
if(a===2)
console.log(&#39;a&#39;)
console.log(&#39;a等于2&#39;)
//只打印a等于2，第2行的缩进可以打任意空格
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;switch-语句&#34;&gt;switch 语句&lt;/h2&gt;

&lt;h3 id=&#34;语法-1&#34;&gt;语法&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;switch(fruit){
    case &amp;quot;banana&amp;quot;:
        //...
        break;
    case &amp;quot;apple&amp;quot;:
        //...
        break;
    default:
        //...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;break-注意事项&#34;&gt;break 注意事项&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;大部分时候，省略 break 就完了，case 会穿透，执行多个 case 语句，直到 break 才结束执行&lt;/li&gt;
&lt;li&gt;少部分时候，可以利用 break&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;while-循环&#34;&gt;while 循环&lt;/h3&gt;

&lt;h3 id=&#34;语法-2&#34;&gt;语法&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;while(表达式){语句}&lt;/li&gt;
&lt;li&gt;判断表达式的真假&lt;/li&gt;
&lt;li&gt;当表达式为真，执行语句，执行完在判断表达式的真假&lt;/li&gt;
&lt;li&gt;当表达式为假，执行后面的语句&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;for-循环&#34;&gt;for 循环&lt;/h2&gt;

&lt;h3 id=&#34;语法糖&#34;&gt;语法糖&lt;/h3&gt;

&lt;p&gt;-for 是 while 循环的方便写法&lt;/p&gt;

&lt;h3 id=&#34;语法-3&#34;&gt;语法&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;for(语句 1:表达式 2;语句 3){循环体}&lt;/li&gt;
&lt;li&gt;先执行语句 1&lt;/li&gt;
&lt;li&gt;如果为真，执行循环体，然后执行语句 3&lt;/li&gt;
&lt;li&gt;如果为假，直接退出循环，执行后面的语句&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;break-和-continue&#34;&gt;break 和 continue&lt;/h2&gt;

&lt;p&gt;break 在循环中，退出所有的循环。而 continue 则是退出当前的循环，后面的代码不执行，执行后面的循环。&lt;/p&gt;

&lt;h2 id=&#34;label-语句&#34;&gt;label 语句&lt;/h2&gt;

&lt;h3 id=&#34;语法-4&#34;&gt;语法&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;foo:{
    console.log(1);
    break foo;
    console.log(&#39;本行不会输出&#39;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;面试题&#34;&gt;面试题&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;{foo:1}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在 chorme 浏览器中是一个对象，在火狐浏览器中则是一个标签，值为 1&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>CSS 知识总结</title>
      <link>http://localhost:1313/post/css%E5%B0%8F%E7%BB%93/</link>
      <pubDate>Sun, 08 Sep 2019 14:30:52 +0800</pubDate>
      
      <guid>http://localhost:1313/post/css%E5%B0%8F%E7%BB%93/</guid>
      
        <description>

&lt;h1 id=&#34;css-知识总结&#34;&gt;CSS 知识总结&lt;/h1&gt;

&lt;h2 id=&#34;浏览器渲染原理&#34;&gt;浏览器渲染原理&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;主要有如下步骤
1.根据HTML构建HTML树
2.根据CSS构建CSS树
3.将两颗树合并成一颗渲染树
4.Layout布局（文档流，盒模型，计算大小和位置）
5.Paint绘制（边框颜色，文字颜色，阴影等画出来）
6.Compose合成（根据层叠关系展示画面）
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;如何更新样式&#34;&gt;如何更新样式&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;一般使用JS来更新样式，有三种更新方式
1.全走，如div.remove()会触发当前消失，其他元素relayout
2.第二种，跳过layout 改变背景色，只需composite
3.跳过layout和paint 改变transfrom,只需composite
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;css-动画的两种做法&#34;&gt;CSS 动画的两种做法&lt;/h2&gt;

&lt;h3 id=&#34;1-transition-过渡&#34;&gt;1.transition 过渡&lt;/h3&gt;

&lt;p&gt;作用:补充中间帧
语法:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;transition:属性名(如width,all) 时长(1000ms) 过渡方式(linear|ease) 延迟
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注意：不是所有属性都能过渡，如 display:none=&amp;gt;block 无法过渡&lt;/p&gt;

&lt;h3 id=&#34;2-animation&#34;&gt;2.animation&lt;/h3&gt;

&lt;p&gt;声明关键帧&lt;/p&gt;

&lt;p&gt;添加动画&lt;/p&gt;

&lt;p&gt;使用写法如下&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@keyframes xxx{
    0%{transform:scale(1)}
    100%{transform:scale(1.2)}
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;animation 缩写语法:时长(1s 或者 1000ms)|过渡方式(linear)|延迟|次数(infinite)|方向(reverse|alternative|alternative-reverse)|填充模式(none|forwards|backwards)|是否暂停(paused|running)|动画名;&lt;/p&gt;

&lt;h3 id=&#34;3-画一个跳动的红心来实践下&#34;&gt;3.画一个跳动的红心来实践下&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot; /&amp;gt;
    &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, initial-scale=1.0&amp;quot; /&amp;gt;
    &amp;lt;meta http-equiv=&amp;quot;X-UA-Compatible&amp;quot; content=&amp;quot;ie=edge&amp;quot; /&amp;gt;
    &amp;lt;title&amp;gt;Document&amp;lt;/title&amp;gt;
    &amp;lt;style&amp;gt;
      #heart {
        margin: 300px;
        position: relative;
        display: inline-block;
        animation: hear 1000ms infinite alternate-reverse linear;
        /* transition: all 1s; */
      }
      /* #heart:hover {
        transform: scale(0.5);
      } */

      @keyframes hear {
        0% {
          transform: scale(1);
        }
        100% {
          transform: scale(1.2);
        }
      }

      .left {
        position: absolute;
        height: 100px;
        width: 100px;
        background-color: red;
        transform: rotate(45deg) translate(-80px, 0px);
        border-radius: 50% 0 0 50%;
      }
      .right {
        position: absolute;
        height: 100px;
        width: 100px;
        background-color: red;
        transform: rotate(45deg) translate(0px, -80px);
        border-radius: 50% 50% 0% 0%;
      }
      .bottom {
        position: absolute;
        height: 100px;
        width: 100px;
        background-color: red;
        transform: rotate(45deg);
      }
    &amp;lt;/style&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;div id=&amp;quot;heart&amp;quot;&amp;gt;
      &amp;lt;div class=&amp;quot;left&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
      &amp;lt;div class=&amp;quot;right&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
      &amp;lt;div class=&amp;quot;bottom&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;

&lt;p&gt;css 的知识需要自己不断实践练习才能掌握了解。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>JavaScript 的诞生</title>
      <link>http://localhost:1313/post/javascript-%E7%9A%84%E8%AF%9E%E7%94%9F/</link>
      <pubDate>Sun, 01 Sep 2019 14:30:52 +0800</pubDate>
      
      <guid>http://localhost:1313/post/javascript-%E7%9A%84%E8%AF%9E%E7%94%9F/</guid>
      
        <description>

&lt;h1 id=&#34;javascript-的诞生&#34;&gt;JavaScript 的诞生&lt;/h1&gt;

&lt;p&gt;JavaScript 因为互联网而生，紧随着浏览器的出现而问世。&lt;/p&gt;

&lt;p&gt;Netscape 公司发现，Navigator 浏览器需要一种可以嵌入网页的脚本语言，用来控制浏览器行为。当时，网速很慢而且上网费很贵，有些操作不宜在服务器端完成。这就需要在网页中嵌入小程序，让浏览器检查。&lt;/p&gt;

&lt;p&gt;管理层对这种浏览器脚本语言的设想是：功能不需要太强，语法较为简单，容易学习和部署。那一年，正逢 Java 语言开始推向市场，Netscape 公司决定，脚本语言的语法要接近 Java，并且可以支持 Java 程序。这些设想直接排除了使用现存语言，比如 perl、python 和 TCL。&lt;/p&gt;

&lt;p&gt;1995 年，Netscape 公司雇佣了程序员 Brendan Eich 开发这种网页脚本语言。Brendan Eich 有很强的函数式编程背景，希望以 Scheme 语言为蓝本，实现这种新语言。&lt;/p&gt;

&lt;p&gt;1995 年 5 月，Brendan Eich 只用了 10 天，就设计完成了这种语言的第一版。它是一个大杂烩，语法有多个来源。&lt;/p&gt;

&lt;p&gt;Netscape 公司的这种浏览器脚本语言，最初名字叫做 Mocha，1995 年 9 月改为 LiveScript。12 月，Netscape 公司与 Sun 公司达成协议，后者允许将这种语言叫做 JavaScript。这样一来，Netscape 公司可以借助 Java 语言的声势，而 Sun 公司则将自己的影响力扩展到了浏览器。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Css布局flex与grid</title>
      <link>http://localhost:1313/post/css%E5%B8%83%E5%B1%80flex%E5%92%8Cgrid/</link>
      <pubDate>Sat, 31 Aug 2019 14:30:52 +0800</pubDate>
      
      <guid>http://localhost:1313/post/css%E5%B8%83%E5%B1%80flex%E5%92%8Cgrid/</guid>
      
        <description>

&lt;h1 id=&#34;flex-布局&#34;&gt;flex 布局&lt;/h1&gt;

&lt;h2 id=&#34;常用代码&#34;&gt;常用代码&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;display:flex;
flex-direction:row/column;
flex-wrap:wrap;
justify-content:center/space-between;
align-items:center;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;flex-布局小案例&#34;&gt;flex 布局小案例&lt;/h2&gt;

&lt;p&gt;html&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt;
  &amp;lt;title&amp;gt;JS Bin&amp;lt;/title&amp;gt;

&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;header&amp;gt;
  &amp;lt;div class=&amp;quot;logo&amp;quot;&amp;gt;
    &amp;lt;img src=&amp;quot;https://static.xiedaimala.com/xdml/cdn/assets/white-logo-1a762b425df663fbccee710fe08d66951cea2fbc0a0350f03446ab30462e739f.png&amp;quot; alt=&amp;quot;&amp;quot;&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;ul&amp;gt;
    &amp;lt;li&amp;gt;首页&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;课程&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;优惠&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;关于&amp;lt;/li&amp;gt;
  &amp;lt;/ul&amp;gt;
&amp;lt;/header&amp;gt;
  &amp;lt;div class=&amp;quot;content&amp;quot;&amp;gt;
    &amp;lt;aside&amp;gt;&amp;lt;/aside&amp;gt;
    &amp;lt;main&amp;gt;&amp;lt;/main&amp;gt;
    &amp;lt;div class=&amp;quot;ad&amp;quot;&amp;gt;

    &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;imglist&amp;quot;&amp;gt;
    &amp;lt;div class=&amp;quot;inner&amp;quot;&amp;gt;
       &amp;lt;div class=&amp;quot;img&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;div class=&amp;quot;img&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;div class=&amp;quot;img&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;div class=&amp;quot;img&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;div class=&amp;quot;img&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;div class=&amp;quot;img&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;div class=&amp;quot;img&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;

  &amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;css&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* {
        padding: 0px;
        margin: 0px;
        box-sizing: border-box;
      }

ul{
  display:flex;
  list-style: none;
}
.logo{

  padding:5px 0px 0px 0px;

}

ul&amp;gt;li{

  padding:5px
}


.logo&amp;gt;img{
  height:30px;
}
header{
  background: #666;
  display:flex;
  justify-content:space-between;
}
.content{
  margin-top:10px;
  display: flex;
  width:800px;
  margin-left:auto;
  margin-right:auto;
}

aside{
  width:200px;
  background: #888;
}
main{
  height:400px;
  flex-grow:1;
  background: #000;
}
.ad{
  width:100px;
  background: #999;
}

.imglist{

  width:800px;
  margin-left:auto;
  margin-right:auto;
  margin-top:10px;

}
.imglist&amp;gt;.inner{
  display:flex;
  flex-wrap:wrap;
  margin-right:-12px;
}

.imglist&amp;gt;.inner&amp;gt;.img{
  height:191px;
  width:191px;
  background: #678;
  border:1px solid red;
  margin-right:12px;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;grid-布局&#34;&gt;grid 布局&lt;/h1&gt;

&lt;h2 id=&#34;二维布局使用-grid-现在兼容的不多&#34;&gt;二维布局使用 grid，现在兼容的不多&lt;/h2&gt;

&lt;p&gt;常用属性&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;container中有
grid-template-columns;
grid-template-rows;
grid-gap;
item中的设置为
grid-column-start;
grid-column-end;
grid-row-start;
grid-row-end;

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;grid-的小案例&#34;&gt;grid 的小案例&lt;/h2&gt;

&lt;p&gt;html&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt;
  &amp;lt;title&amp;gt;JS Bin&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
  &amp;lt;div class=&amp;quot;container&amp;quot;&amp;gt;
    &amp;lt;div class=&amp;quot;image big&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;div class=&amp;quot;image small&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;div class=&amp;quot;image small&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;div class=&amp;quot;image small&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;div class=&amp;quot;image mid&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;div class=&amp;quot;image mid&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;div class=&amp;quot;image mid&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;css&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;*{
  margin:0px;
  padding:0px;
  box-sizing:border-box;
}
.container{

  display:grid;
  grid-template-rows:240px 120px 120px 120px 120px;
  grid-template-columns:250px 250px;

  grid-template-areas:
    &amp;quot;big mid1&amp;quot;
    &amp;quot;big mid2&amp;quot;
    &amp;quot;small1 mid2&amp;quot;
    &amp;quot;small2 mid3&amp;quot;
    &amp;quot;small3 mid3&amp;quot;

}

.container&amp;gt;*{
  border:1px solid red;
}

.container&amp;gt;.image:first-child{
  grid-area:big;

}

.container&amp;gt;.image:nth-child(2){
  grid-area:small1;
}

.container&amp;gt;.image:nth-child(3){
  grid-area:small2;
}
.container&amp;gt;.image:nth-child(4){
  grid-area:small3;
}
.container&amp;gt;.image:nth-child(5){
  grid-area:mid1;
}
.container&amp;gt;.image:nth-child(6){
  grid-area:mid2;
}
.container&amp;gt;.image:nth-child(7){
  grid-area:mid3;
}

&lt;/code&gt;&lt;/pre&gt;
</description>
      
    </item>
    
    <item>
      <title>浅析URL</title>
      <link>http://localhost:1313/post/%E6%B5%85%E6%9E%90url/</link>
      <pubDate>Fri, 30 Aug 2019 14:30:52 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E6%B5%85%E6%9E%90url/</guid>
      
        <description>

&lt;h1 id=&#34;浅析-url&#34;&gt;浅析 URL&lt;/h1&gt;

&lt;h2 id=&#34;url-构成部分&#34;&gt;URL 构成部分&lt;/h2&gt;

&lt;p&gt;协议+域名或 IP+端口号+路径+查询字符串+锚点
URL 举例：
&lt;a href=&#34;https://www.baidu.com/s?wd=hello&amp;amp;rsv_spt=10#5&#34;&gt;https://www.baidu.com/s?wd=hello&amp;amp;rsv_spt=10#5&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;dns-的作用&#34;&gt;DNS 的作用&lt;/h2&gt;

&lt;p&gt;可以解析域名，通过输入域名地址，会通过 dns 解析得到 IP 地址。可以使用 nslookup 域名地址来获取 IP 地址&lt;/p&gt;

&lt;h2 id=&#34;ip-的作用&#34;&gt;IP 的作用&lt;/h2&gt;

&lt;p&gt;IP 分为内网和外网。通过路由器划分内外网。IP 可以标示互联网上计算机的位置。可以使用 ping 网址，来获得对应的 IP 地址。&lt;/p&gt;

&lt;h2 id=&#34;域名&#34;&gt;域名&lt;/h2&gt;

&lt;p&gt;域名就是对 IP 的别称。一个域名可以对应不同 IP,这叫负载均衡。一个 IP 可以对应不同域名，这叫主机共享。域名有以下分类。com，org 之类是顶级域名、baidu.com 为 2 级域名、www.baidu.com 为三级域名。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>html重点标签</title>
      <link>http://localhost:1313/post/html%E9%87%8D%E7%82%B9%E6%A0%87%E7%AD%BE/</link>
      <pubDate>Sat, 17 Aug 2019 14:30:52 +0800</pubDate>
      
      <guid>http://localhost:1313/post/html%E9%87%8D%E7%82%B9%E6%A0%87%E7%AD%BE/</guid>
      
        <description>

&lt;h1 id=&#34;html-重点标签&#34;&gt;html 重点标签&lt;/h1&gt;

&lt;h2 id=&#34;a-标签&#34;&gt;a 标签&lt;/h2&gt;

&lt;h3 id=&#34;属性&#34;&gt;属性&lt;/h3&gt;

&lt;p&gt;href 超链接&lt;/p&gt;

&lt;p&gt;target&lt;/p&gt;

&lt;p&gt;href 超链接，取值可以有网站，如//google.com,也可以路径，比如/a/b/c,a/b/c,index.html，./index.html,也可以伪协议，javascript：代码; mailto:邮箱地址，表示跳转邮箱。跳转电话为 tel:13xx&amp;hellip;,也能跳转到知道 id 位置，#id 名称.&lt;/p&gt;

&lt;p&gt;target 取值。
_blank 表示跳转到新的页面。 _self 表示在当前页面打开。_top 表示在最顶层打开。_parent 表示在当前页面的上一层页面打开。
target 取值为“xxx”时候，会在当前页面打开,window.name 可以知道该页面的 name 为 xxx,也可以指定 iframe 的 name 为 xxx 时，target 的值为 xxx 时，会在 iframe 页面打开网页。&lt;/p&gt;

&lt;h2 id=&#34;table-标签&#34;&gt;table 标签&lt;/h2&gt;

&lt;p&gt;table 标签相关是&lt;/p&gt;

&lt;p&gt;table&lt;/p&gt;

&lt;p&gt;thead&lt;/p&gt;

&lt;p&gt;tbody&lt;/p&gt;

&lt;p&gt;tfoot&lt;/p&gt;

&lt;p&gt;tr 行&lt;/p&gt;

&lt;p&gt;th 表头&lt;/p&gt;

&lt;p&gt;td 数据&lt;/p&gt;

&lt;p&gt;相关样式
table-layout
border-collapse
border-spacing&lt;/p&gt;

&lt;p&gt;常用表格使用代码如下&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot; /&amp;gt;
    &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, initial-scale=1.0&amp;quot; /&amp;gt;
    &amp;lt;meta http-equiv=&amp;quot;X-UA-Compatible&amp;quot; content=&amp;quot;ie=edge&amp;quot; /&amp;gt;
    &amp;lt;title&amp;gt;Document&amp;lt;/title&amp;gt;
    &amp;lt;style&amp;gt;
      table {
        width: 500px;
        table-layout: auto;
        border-spacing: 0px;
        border-collapse: collapse;
        border: 2px solid red;
      }
      th,
      td {
        border: 1px solid blue;
      }
    &amp;lt;/style&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;table&amp;gt;
      &amp;lt;thead&amp;gt;
        &amp;lt;tr&amp;gt;
          &amp;lt;th&amp;gt;&amp;lt;/th&amp;gt;
          &amp;lt;th&amp;gt;小明&amp;lt;/th&amp;gt;
          &amp;lt;th&amp;gt;小红&amp;lt;/th&amp;gt;
          &amp;lt;th&amp;gt;小龙&amp;lt;/th&amp;gt;
        &amp;lt;/tr&amp;gt;
      &amp;lt;/thead&amp;gt;

      &amp;lt;tbody&amp;gt;
        &amp;lt;tr&amp;gt;
          &amp;lt;th&amp;gt;语文&amp;lt;/th&amp;gt;
          &amp;lt;td&amp;gt;90&amp;lt;/td&amp;gt;
          &amp;lt;td&amp;gt;82&amp;lt;/td&amp;gt;
          &amp;lt;td&amp;gt;77&amp;lt;/td&amp;gt;
        &amp;lt;/tr&amp;gt;
        &amp;lt;tr&amp;gt;
          &amp;lt;th&amp;gt;数学&amp;lt;/th&amp;gt;
          &amp;lt;td&amp;gt;90&amp;lt;/td&amp;gt;
          &amp;lt;td&amp;gt;82&amp;lt;/td&amp;gt;
          &amp;lt;td&amp;gt;67&amp;lt;/td&amp;gt;
        &amp;lt;/tr&amp;gt;
        &amp;lt;tr&amp;gt;
          &amp;lt;th&amp;gt;英语&amp;lt;/th&amp;gt;
          &amp;lt;td&amp;gt;92&amp;lt;/td&amp;gt;
          &amp;lt;td&amp;gt;72&amp;lt;/td&amp;gt;
          &amp;lt;td&amp;gt;77&amp;lt;/td&amp;gt;
        &amp;lt;/tr&amp;gt;
      &amp;lt;/tbody&amp;gt;
      &amp;lt;tfoot&amp;gt;
        &amp;lt;tr&amp;gt;
          &amp;lt;th&amp;gt;合计&amp;lt;/th&amp;gt;
          &amp;lt;td&amp;gt;200&amp;lt;/td&amp;gt;
          &amp;lt;td&amp;gt;200&amp;lt;/td&amp;gt;
          &amp;lt;td&amp;gt;200&amp;lt;/td&amp;gt;
        &amp;lt;/tr&amp;gt;
      &amp;lt;/tfoot&amp;gt;
    &amp;lt;/table&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;img-标签&#34;&gt;img 标签&lt;/h2&gt;

&lt;h3 id=&#34;作用&#34;&gt;作用&lt;/h3&gt;

&lt;p&gt;发出 get 请求，展示一张图片&lt;/p&gt;

&lt;h3 id=&#34;属性-1&#34;&gt;属性&lt;/h3&gt;

&lt;p&gt;alt /height 图片高度/width 图片宽度/src 图片来源路径&lt;/p&gt;

&lt;h3 id=&#34;事件&#34;&gt;事件&lt;/h3&gt;

&lt;p&gt;onload 图片成功加载的事件/ onerror 图片失败加载的事件&lt;/p&gt;

&lt;h3 id=&#34;响应式&#34;&gt;响应式&lt;/h3&gt;

&lt;p&gt;max-width:100% 添加后，可以在手机上也能适配&lt;/p&gt;

&lt;h2 id=&#34;form-标签&#34;&gt;form 标签&lt;/h2&gt;

&lt;h3 id=&#34;作用-发-get-或-post-请求-然后刷新页面&#34;&gt;作用：发 get 或 post 请求，然后刷新页面。&lt;/h3&gt;

&lt;h3 id=&#34;属性-2&#34;&gt;属性&lt;/h3&gt;

&lt;p&gt;action 发送的地址/autocomplete/method 发送方式/target 提交哪个页面&lt;/p&gt;

&lt;h3 id=&#34;事件-1&#34;&gt;事件&lt;/h3&gt;

&lt;p&gt;onsubmit 只有含 submit 的标签才能触发事件&lt;/p&gt;

&lt;h2 id=&#34;input-标签&#34;&gt;input 标签&lt;/h2&gt;

&lt;h3 id=&#34;作用-1&#34;&gt;作用&lt;/h3&gt;

&lt;p&gt;让用户输入内容&lt;/p&gt;

&lt;h3 id=&#34;属性-3&#34;&gt;属性&lt;/h3&gt;

&lt;p&gt;type:button/checkbox/email/file/hidden/number/password/radio/search/submit/tel&lt;/p&gt;

&lt;p&gt;其他 name/autofocus/checked/disabled/maxlength/pattern/value/placeholder&lt;/p&gt;

&lt;h3 id=&#34;事件-2&#34;&gt;事件&lt;/h3&gt;

&lt;p&gt;onchange/onfocus/onblur&lt;/p&gt;

&lt;h3 id=&#34;验证器&#34;&gt;验证器&lt;/h3&gt;

&lt;p&gt;Html5 新功能，可以在 input 属性中加入 require 验证等&lt;/p&gt;

&lt;p&gt;常用代码例子&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot; /&amp;gt;
    &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, initial-scale=1.0&amp;quot; /&amp;gt;
    &amp;lt;meta http-equiv=&amp;quot;X-UA-Compatible&amp;quot; content=&amp;quot;ie=edge&amp;quot; /&amp;gt;
    &amp;lt;title&amp;gt;Document&amp;lt;/title&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;form action=&amp;quot;/xxx&amp;quot; method=&amp;quot;POST&amp;quot; autocomplete=&amp;quot;on&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;
      &amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;user&amp;quot; /&amp;gt;
      &amp;lt;input type=&amp;quot;submit&amp;quot; /&amp;gt;
      &amp;lt;hr /&amp;gt;
      &amp;lt;input type=&amp;quot;radio&amp;quot; name=&amp;quot;gender&amp;quot; /&amp;gt;male
      &amp;lt;input type=&amp;quot;radio&amp;quot; name=&amp;quot;gender&amp;quot; /&amp;gt;female
      &amp;lt;hr /&amp;gt;
      &amp;lt;input type=&amp;quot;checkbox&amp;quot; name=&amp;quot;hobby&amp;quot; /&amp;gt;basket
      &amp;lt;input type=&amp;quot;checkbox&amp;quot; name=&amp;quot;hobby&amp;quot; /&amp;gt;foot
      &amp;lt;input type=&amp;quot;checkbox&amp;quot; name=&amp;quot;hobby&amp;quot; /&amp;gt;table
      &amp;lt;hr /&amp;gt;
      &amp;lt;textarea
        name=&amp;quot;text&amp;quot;
        style=&amp;quot;resize: none ;width:100px;&amp;quot;
        cols=&amp;quot;30&amp;quot;
        rows=&amp;quot;10&amp;quot;
      &amp;gt;&amp;lt;/textarea&amp;gt;
      &amp;lt;hr /&amp;gt;
      &amp;lt;select name=&amp;quot;date&amp;quot; id=&amp;quot;&amp;quot;&amp;gt;
        &amp;lt;option value=&amp;quot;1&amp;quot;&amp;gt;星期一&amp;lt;/option&amp;gt;
        &amp;lt;option value=&amp;quot;2&amp;quot;&amp;gt;星期二&amp;lt;/option&amp;gt;
      &amp;lt;/select&amp;gt;
    &amp;lt;/form&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;

&lt;p&gt;使用标签，需要多写相关标签，多练才能熟悉用法。写的页面，不能直接打开文件，而是可以使用命令打开，如 http-serve . -c-1 命令打开。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>hugo博客搭建</title>
      <link>http://localhost:1313/post/hugo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</link>
      <pubDate>Fri, 16 Aug 2019 14:30:52 +0800</pubDate>
      
      <guid>http://localhost:1313/post/hugo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</guid>
      
        <description>

&lt;h1 id=&#34;hugo-博客搭建&#34;&gt;hugo 博客搭建&lt;/h1&gt;

&lt;h2 id=&#34;安装-hugo&#34;&gt;安装 hugo&lt;/h2&gt;

&lt;h3 id=&#34;mac-安装方式&#34;&gt;mac 安装方式&lt;/h3&gt;

&lt;p&gt;使用命令
brew install hugo 然后 hugo version 查看版本号是否安装成功&lt;/p&gt;

&lt;h3 id=&#34;window-安装方式&#34;&gt;window 安装方式&lt;/h3&gt;

&lt;p&gt;去 hugo release 页面下载，然后解压，把 hugo.exe 放到 D:\Software\hugo\hugo.exe,把 D:\Software\hugo\加入到 PATH，重启终端，运行 hugo version 查看版本&lt;/p&gt;

&lt;h2 id=&#34;快速搭建博客&#34;&gt;快速搭建博客&lt;/h2&gt;

&lt;p&gt;查看官方文档搭建，进入 hugo 官网，点 quick start 快速开始,从 step2-step7 照抄，
得到一个 public 目录，这就是我们的博客站点。然后部署到 github 上。hugo -server 可以预览。在 public 目录下，git init，git add .,git commit -m ,然后关联远程仓库，git remote add origin git@github.com:xxxx/x.github.io.git ,然后 git push -u origin master 推到远程仓库。然后访问 XXX.github.io 就能访问搭建成功的博客了。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>html标签入门笔记1</title>
      <link>http://localhost:1313/post/html%E6%A0%87%E7%AD%BE%E5%85%A5%E9%97%A8/</link>
      <pubDate>Mon, 12 Aug 2019 14:30:52 +0800</pubDate>
      
      <guid>http://localhost:1313/post/html%E6%A0%87%E7%AD%BE%E5%85%A5%E9%97%A8/</guid>
      
        <description>

&lt;h1 id=&#34;html-标签入门笔记-1&#34;&gt;HTML 标签入门笔记 1&lt;/h1&gt;

&lt;h2 id=&#34;html-发明者&#34;&gt;HTML 发明者&lt;/h2&gt;

&lt;p&gt;是由蒂姆·伯纳斯-李 90 年左右创造发明的，发明了一套 html,url,http 规则。&lt;/p&gt;

&lt;h2 id=&#34;html-页面起手需要写的格式&#34;&gt;HTML 页面起手需要写的格式&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;!-- 文档类型 --&amp;gt;
&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;
  &amp;lt;!-- 语言的标签，可以换成ch-ZN --&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot; /&amp;gt;
    &amp;lt;!-- 文件的字符编码 --&amp;gt;
    &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, initial-scale=1.0&amp;quot; /&amp;gt;
    &amp;lt;!-- 禁用缩放 --&amp;gt;
    &amp;lt;meta http-equiv=&amp;quot;X-UA-Compatible&amp;quot; content=&amp;quot;ie=edge&amp;quot; /&amp;gt;
    &amp;lt;!-- 兼容手机，告诉ie的版本 --&amp;gt;
    &amp;lt;title&amp;gt;Document&amp;lt;/title&amp;gt;
    &amp;lt;!-- 标题 --&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;章节标签&#34;&gt;章节标签&lt;/h2&gt;

&lt;p&gt;标题 h1-h6&lt;/p&gt;

&lt;p&gt;章节 section&lt;/p&gt;

&lt;p&gt;文章 article&lt;/p&gt;

&lt;p&gt;段落 p&lt;/p&gt;

&lt;p&gt;头部 header&lt;/p&gt;

&lt;p&gt;脚部 footer&lt;/p&gt;

&lt;p&gt;主要内容 main&lt;/p&gt;

&lt;p&gt;旁支内容 aside&lt;/p&gt;

&lt;p&gt;划分 div&lt;/p&gt;

&lt;h2 id=&#34;全局属性&#34;&gt;全局属性&lt;/h2&gt;

&lt;p&gt;所有标签都有的属性&lt;/p&gt;

&lt;p&gt;class 表示类属性&lt;/p&gt;

&lt;p&gt;contenteditable 表示可以编辑&lt;/p&gt;

&lt;p&gt;hidden 隐藏属性&lt;/p&gt;

&lt;p&gt;id 不到万不得已，不要使用，因为有 2 个标签 id 值都一样，也不会报错&lt;/p&gt;

&lt;p&gt;style 样式属性&lt;/p&gt;

&lt;p&gt;tabindex 可以使用 tab 键，上下移动。数值为 0 时，表示最后访问。为-1 表示永远访问不到&lt;/p&gt;

&lt;p&gt;title 显示内容的标签&lt;/p&gt;

&lt;h2 id=&#34;默认样式&#34;&gt;默认样式&lt;/h2&gt;

&lt;p&gt;html 会自带一些样式。因为那时候还没有 css，有些样式太难看，需要清楚样式。自定义一个 cssreset.css,如下&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}
*::before,
*::after {
  box-sizing: border-box;
}
a {
  color: inherit;
  text-decoration: none;
}
input,
button {
  font-family: inherit;
}
ol,
ul {
  list-style: none;
}
table {
  border-collapse: collapse;
  border-spacing: 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;内容标签&#34;&gt;内容标签&lt;/h2&gt;

&lt;p&gt;ol+li 有序列表内容&lt;/p&gt;

&lt;p&gt;ul+li 无序列表内容&lt;/p&gt;

&lt;p&gt;dl+dt+dd 描述内容&lt;/p&gt;

&lt;p&gt;pre 保留空格和回车&lt;/p&gt;

&lt;p&gt;hr 水平线&lt;/p&gt;

&lt;p&gt;br 换行&lt;/p&gt;

&lt;p&gt;a 链接&lt;/p&gt;

&lt;p&gt;em 语气强调&lt;/p&gt;

&lt;p&gt;strong 更加强烈的强调&lt;/p&gt;

&lt;p&gt;code 保持字体的对齐&lt;/p&gt;

&lt;p&gt;quote 行内引用&lt;/p&gt;

&lt;p&gt;blockquote 换行引用&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>github的使用</title>
      <link>http://localhost:1313/post/%E7%AC%AC%E4%BA%8C%E7%AF%87%E5%8D%9A%E5%AE%A2/</link>
      <pubDate>Sun, 11 Aug 2019 14:32:52 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E7%AC%AC%E4%BA%8C%E7%AF%87%E5%8D%9A%E5%AE%A2/</guid>
      
        <description>

&lt;h2 id=&#34;github的使用&#34;&gt;github的使用&lt;/h2&gt;

&lt;p&gt;使用远程仓库，需要先配置ssh。使用命令生产公钥和私钥，把公钥上传到github上，使用命令ssh -T git@github.com ，github会给你一个公钥确认身份
    创建一个新的仓库，使用git remote add origin git@github.com:xxx/blog-demo01.git，添加一个远程仓库地址，git push -u origin master 把本地的仓库master分支推到远程仓库上的master分支。
    有新的修改后，用git add 添加修改的文件，git commit -v 提交，最后git push 在推到远程仓库，同步。有时候别人修改了远程仓库，需要git pull，然后才能git push.
    使用git clone 命令，可以下载远程仓库到本地。&lt;/p&gt;

&lt;p&gt;搭建个人博客，需要先熟悉markdown基本语法。可以实现git+github+md+vscode实现博客的编写。yarn add global git-open，安装后使用git open 直接打开对应的参考，方便修改对应的blog.md.&lt;/p&gt;

&lt;p&gt;也可以使用hugo来搭建一个个人博客。首先下载release版本。然后配置好path路径。如目录是software/hugo/hugo.exe，则配置path路径为software/hugo就可以了，在命令行输入hugo version，显示版本就安装成功了。
安装hugo官网的7部步骤来，输入命令行。到最后的hugo命令时，还需要部署到github上。需要在生产的博客文件添加.gitignore文件，在里面输入/public/表示忽略public，里面的内容单独git init，git add ，git commit -v git remote add &amp;hellip;&amp;hellip;最后git push 上传到github仓库.hugo个人博客支持换主题，可以查找对应的换肤文档，来实现换主题功能。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>开播大吉</title>
      <link>http://localhost:1313/post/%E5%BC%80%E6%92%AD%E5%A4%A7%E5%90%89/</link>
      <pubDate>Sun, 11 Aug 2019 14:30:52 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E5%BC%80%E6%92%AD%E5%A4%A7%E5%90%89/</guid>
      
        <description>

&lt;h1 id=&#34;大家好&#34;&gt;大家好&lt;/h1&gt;

&lt;p&gt;这是第一篇博客&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>数据结构手写</title>
      <link>http://localhost:1313/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%89%8B%E5%86%99/</link>
      <pubDate>Sun, 11 Aug 2019 14:30:52 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%89%8B%E5%86%99/</guid>
      
        <description>

&lt;h1 id=&#34;自定义栈&#34;&gt;自定义栈&lt;/h1&gt;

&lt;p&gt;代码如下&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class MyStack&amp;lt;E&amp;gt; {
    private int top=-1;
    private Object[] stack;
    public MyStack(){
        stack=new Object[10];
    }

    public boolean isEmpty(){
        return top==-1;
    }

    public E push(E item){
        stack[++top]=item;
        return item;
    }

    public E peek(){
        if(isEmpty()){
            return null;
        }
        return (E)stack[top];
    }

    public E pop(){
        E e = peek();
        stack[top]=null;
        top--;
        return e;

    }

    /*
    * 栈满扩容
    *
    * */
    public void kuoRong(int size){
        int len=stack.length;
        if(size&amp;gt;len){

            Arrays.copyOf(stack,10);
        }

    }


    public E getTop(){
        if(top==-1){
            return null;
        }
        return (E)stack[top];
    }

}

&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;自定义链表&#34;&gt;自定义链表&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;public class Node {
    public int data;
    Node next=null;
    public Node(int data){
        this.data=data;
    }
}

public class OperateClass {
    public Node headNode=null;
    public Node addNode(int data){
        Node newNode = new Node(data);
        if(headNode==null){
            //头节点为空，把新节点当做头节点
            headNode=newNode;
            newNode.next=null;
            return headNode;
        }
        //节点不为空，把新节点放到头节点最后一个节点上的next位置指向
        Node tempNode=headNode;
        while (tempNode.next!=null){
            tempNode=tempNode.next;
        }
        tempNode.next=newNode;
        return headNode;


    }

    public boolean delNode(int index){
        if(index&amp;lt;1 || index&amp;gt;length()){
            return false;
        }
        if(index==1){
            //删除头节点
            headNode=headNode.next;
            return true;

        }

        Node preNode=headNode;
        //取得头节点
        Node currentNode = preNode.next;
        //头节点的下一个节点，当前节点
        int count=2;
        //计数从2开始
        while (currentNode!=null){
            if(count==index){
                //删除节点位置
                preNode.next=currentNode.next;
                //获取当前节点的在下一个节点
                return true;
            }
            preNode=currentNode;
            currentNode=currentNode.next;
            count++;
        }
        return true;


    }


    public int length(){
        int length=0;
        Node tempNode=headNode;
        while (tempNode!=null){
            length++;
            tempNode=tempNode.next;
        }
        return length;
    }

}


&lt;/code&gt;&lt;/pre&gt;
</description>
      
    </item>
    
    <item>
      <title>测试</title>
      <link>http://localhost:1313/post/%E6%B5%8B%E8%AF%95/</link>
      <pubDate>Sun, 11 Aug 2019 14:30:52 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E6%B5%8B%E8%AF%95/</guid>
      
        <description>

&lt;h1 id=&#34;大家好&#34;&gt;大家好&lt;/h1&gt;

&lt;p&gt;这是测试博客&lt;/p&gt;
</description>
      
    </item>
    
  </channel>
</rss>
