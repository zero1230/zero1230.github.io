<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>My Blog</title>
    <link>http://localhost:1313/</link>
    <description>Recent content on My Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 17 Aug 2019 14:30:52 +0800</lastBuildDate>
    
        <atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>About</title>
      <link>http://localhost:1313/about/</link>
      <pubDate>Sun, 20 Aug 2017 21:38:52 +0800</pubDate>
      
      <guid>http://localhost:1313/about/</guid>
      
        <description>&lt;p&gt;Hugo is a static site engine written in Go.&lt;/p&gt;

&lt;p&gt;It makes use of a variety of open source projects including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spf13/cobra&#34;&gt;Cobra&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spf13/viper&#34;&gt;Viper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spf13/jWalterWeatherman&#34;&gt;J Walter Weatherman&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spf13/cast&#34;&gt;Cast&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Learn more and contribute on &lt;a href=&#34;https://github.com/gohugoio&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>html重点标签</title>
      <link>http://localhost:1313/post/html%E9%87%8D%E7%82%B9%E6%A0%87%E7%AD%BE/</link>
      <pubDate>Sat, 17 Aug 2019 14:30:52 +0800</pubDate>
      
      <guid>http://localhost:1313/post/html%E9%87%8D%E7%82%B9%E6%A0%87%E7%AD%BE/</guid>
      
        <description>

&lt;h1 id=&#34;html-重点标签&#34;&gt;html 重点标签&lt;/h1&gt;

&lt;h2 id=&#34;a-标签&#34;&gt;a 标签&lt;/h2&gt;

&lt;h3 id=&#34;属性&#34;&gt;属性&lt;/h3&gt;

&lt;p&gt;href 超链接&lt;/p&gt;

&lt;p&gt;target&lt;/p&gt;

&lt;p&gt;href 超链接，取值可以有网站，如//google.com,也可以路径，比如/a/b/c,a/b/c,index.html，./index.html,也可以伪协议，javascript：代码; mailto:邮箱地址，表示跳转邮箱。跳转电话为 tel:13xx&amp;hellip;,也能跳转到知道 id 位置，#id 名称.&lt;/p&gt;

&lt;p&gt;target 取值。
_blank 表示跳转到新的页面。 _self 表示在当前页面打开。_top 表示在最顶层打开。_parent 表示在当前页面的上一层页面打开。
target 取值为“xxx”时候，会在当前页面打开,window.name 可以知道该页面的 name 为 xxx,也可以指定 iframe 的 name 为 xxx 时，target 的值为 xxx 时，会在 iframe 页面打开网页。&lt;/p&gt;

&lt;h2 id=&#34;table-标签&#34;&gt;table 标签&lt;/h2&gt;

&lt;p&gt;table 标签相关是&lt;/p&gt;

&lt;p&gt;table&lt;/p&gt;

&lt;p&gt;thead&lt;/p&gt;

&lt;p&gt;tbody&lt;/p&gt;

&lt;p&gt;tfoot&lt;/p&gt;

&lt;p&gt;tr 行&lt;/p&gt;

&lt;p&gt;th 表头&lt;/p&gt;

&lt;p&gt;td 数据&lt;/p&gt;

&lt;p&gt;相关样式
table-layout
border-collapse
border-spacing&lt;/p&gt;

&lt;p&gt;常用表格使用代码如下&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot; /&amp;gt;
    &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, initial-scale=1.0&amp;quot; /&amp;gt;
    &amp;lt;meta http-equiv=&amp;quot;X-UA-Compatible&amp;quot; content=&amp;quot;ie=edge&amp;quot; /&amp;gt;
    &amp;lt;title&amp;gt;Document&amp;lt;/title&amp;gt;
    &amp;lt;style&amp;gt;
      table {
        width: 500px;
        table-layout: auto;
        border-spacing: 0px;
        border-collapse: collapse;
        border: 2px solid red;
      }
      th,
      td {
        border: 1px solid blue;
      }
    &amp;lt;/style&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;table&amp;gt;
      &amp;lt;thead&amp;gt;
        &amp;lt;tr&amp;gt;
          &amp;lt;th&amp;gt;&amp;lt;/th&amp;gt;
          &amp;lt;th&amp;gt;小明&amp;lt;/th&amp;gt;
          &amp;lt;th&amp;gt;小红&amp;lt;/th&amp;gt;
          &amp;lt;th&amp;gt;小龙&amp;lt;/th&amp;gt;
        &amp;lt;/tr&amp;gt;
      &amp;lt;/thead&amp;gt;

      &amp;lt;tbody&amp;gt;
        &amp;lt;tr&amp;gt;
          &amp;lt;th&amp;gt;语文&amp;lt;/th&amp;gt;
          &amp;lt;td&amp;gt;90&amp;lt;/td&amp;gt;
          &amp;lt;td&amp;gt;82&amp;lt;/td&amp;gt;
          &amp;lt;td&amp;gt;77&amp;lt;/td&amp;gt;
        &amp;lt;/tr&amp;gt;
        &amp;lt;tr&amp;gt;
          &amp;lt;th&amp;gt;数学&amp;lt;/th&amp;gt;
          &amp;lt;td&amp;gt;90&amp;lt;/td&amp;gt;
          &amp;lt;td&amp;gt;82&amp;lt;/td&amp;gt;
          &amp;lt;td&amp;gt;67&amp;lt;/td&amp;gt;
        &amp;lt;/tr&amp;gt;
        &amp;lt;tr&amp;gt;
          &amp;lt;th&amp;gt;英语&amp;lt;/th&amp;gt;
          &amp;lt;td&amp;gt;92&amp;lt;/td&amp;gt;
          &amp;lt;td&amp;gt;72&amp;lt;/td&amp;gt;
          &amp;lt;td&amp;gt;77&amp;lt;/td&amp;gt;
        &amp;lt;/tr&amp;gt;
      &amp;lt;/tbody&amp;gt;
      &amp;lt;tfoot&amp;gt;
        &amp;lt;tr&amp;gt;
          &amp;lt;th&amp;gt;合计&amp;lt;/th&amp;gt;
          &amp;lt;td&amp;gt;200&amp;lt;/td&amp;gt;
          &amp;lt;td&amp;gt;200&amp;lt;/td&amp;gt;
          &amp;lt;td&amp;gt;200&amp;lt;/td&amp;gt;
        &amp;lt;/tr&amp;gt;
      &amp;lt;/tfoot&amp;gt;
    &amp;lt;/table&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;img-标签&#34;&gt;img 标签&lt;/h2&gt;

&lt;h3 id=&#34;作用&#34;&gt;作用&lt;/h3&gt;

&lt;p&gt;发出 get 请求，展示一张图片&lt;/p&gt;

&lt;h3 id=&#34;属性-1&#34;&gt;属性&lt;/h3&gt;

&lt;p&gt;alt /height 图片高度/width 图片宽度/src 图片来源路径&lt;/p&gt;

&lt;h3 id=&#34;事件&#34;&gt;事件&lt;/h3&gt;

&lt;p&gt;onload 图片成功加载的事件/ onerror 图片失败加载的事件&lt;/p&gt;

&lt;h3 id=&#34;响应式&#34;&gt;响应式&lt;/h3&gt;

&lt;p&gt;max-width:100% 添加后，可以在手机上也能适配&lt;/p&gt;

&lt;h2 id=&#34;form-标签&#34;&gt;form 标签&lt;/h2&gt;

&lt;h3 id=&#34;作用-发-get-或-post-请求-然后刷新页面&#34;&gt;作用：发 get 或 post 请求，然后刷新页面。&lt;/h3&gt;

&lt;h3 id=&#34;属性-2&#34;&gt;属性&lt;/h3&gt;

&lt;p&gt;action 发送的地址/autocomplete/method 发送方式/target 提交哪个页面&lt;/p&gt;

&lt;h3 id=&#34;事件-1&#34;&gt;事件&lt;/h3&gt;

&lt;p&gt;onsubmit 只有含 submit 的标签才能触发事件&lt;/p&gt;

&lt;h2 id=&#34;input-标签&#34;&gt;input 标签&lt;/h2&gt;

&lt;h3 id=&#34;作用-1&#34;&gt;作用&lt;/h3&gt;

&lt;p&gt;让用户输入内容&lt;/p&gt;

&lt;h3 id=&#34;属性-3&#34;&gt;属性&lt;/h3&gt;

&lt;p&gt;type:button/checkbox/email/file/hidden/number/password/radio/search/submit/tel&lt;/p&gt;

&lt;p&gt;其他 name/autofocus/checked/disabled/maxlength/pattern/value/placeholder&lt;/p&gt;

&lt;h3 id=&#34;事件-2&#34;&gt;事件&lt;/h3&gt;

&lt;p&gt;onchange/onfocus/onblur&lt;/p&gt;

&lt;h3 id=&#34;验证器&#34;&gt;验证器&lt;/h3&gt;

&lt;p&gt;Html5 新功能，可以在 input 属性中加入 require 验证等&lt;/p&gt;

&lt;p&gt;常用代码例子&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot; /&amp;gt;
    &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, initial-scale=1.0&amp;quot; /&amp;gt;
    &amp;lt;meta http-equiv=&amp;quot;X-UA-Compatible&amp;quot; content=&amp;quot;ie=edge&amp;quot; /&amp;gt;
    &amp;lt;title&amp;gt;Document&amp;lt;/title&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;form action=&amp;quot;/xxx&amp;quot; method=&amp;quot;POST&amp;quot; autocomplete=&amp;quot;on&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;
      &amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;user&amp;quot; /&amp;gt;
      &amp;lt;input type=&amp;quot;submit&amp;quot; /&amp;gt;
      &amp;lt;hr /&amp;gt;
      &amp;lt;input type=&amp;quot;radio&amp;quot; name=&amp;quot;gender&amp;quot; /&amp;gt;male
      &amp;lt;input type=&amp;quot;radio&amp;quot; name=&amp;quot;gender&amp;quot; /&amp;gt;female
      &amp;lt;hr /&amp;gt;
      &amp;lt;input type=&amp;quot;checkbox&amp;quot; name=&amp;quot;hobby&amp;quot; /&amp;gt;basket
      &amp;lt;input type=&amp;quot;checkbox&amp;quot; name=&amp;quot;hobby&amp;quot; /&amp;gt;foot
      &amp;lt;input type=&amp;quot;checkbox&amp;quot; name=&amp;quot;hobby&amp;quot; /&amp;gt;table
      &amp;lt;hr /&amp;gt;
      &amp;lt;textarea
        name=&amp;quot;text&amp;quot;
        style=&amp;quot;resize: none ;width:100px;&amp;quot;
        cols=&amp;quot;30&amp;quot;
        rows=&amp;quot;10&amp;quot;
      &amp;gt;&amp;lt;/textarea&amp;gt;
      &amp;lt;hr /&amp;gt;
      &amp;lt;select name=&amp;quot;date&amp;quot; id=&amp;quot;&amp;quot;&amp;gt;
        &amp;lt;option value=&amp;quot;1&amp;quot;&amp;gt;星期一&amp;lt;/option&amp;gt;
        &amp;lt;option value=&amp;quot;2&amp;quot;&amp;gt;星期二&amp;lt;/option&amp;gt;
      &amp;lt;/select&amp;gt;
    &amp;lt;/form&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;

&lt;p&gt;使用标签，需要多写相关标签，多练才能熟悉用法。写的页面，不能直接打开文件，而是可以使用命令打开，如 http-serve . -c-1 命令打开。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>hugo博客搭建</title>
      <link>http://localhost:1313/post/hugo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</link>
      <pubDate>Fri, 16 Aug 2019 14:30:52 +0800</pubDate>
      
      <guid>http://localhost:1313/post/hugo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</guid>
      
        <description>

&lt;h1 id=&#34;hugo-博客搭建&#34;&gt;hugo 博客搭建&lt;/h1&gt;

&lt;h2 id=&#34;安装-hugo&#34;&gt;安装 hugo&lt;/h2&gt;

&lt;h3 id=&#34;mac-安装方式&#34;&gt;mac 安装方式&lt;/h3&gt;

&lt;p&gt;使用命令
brew install hugo 然后 hugo version 查看版本号是否安装成功&lt;/p&gt;

&lt;h3 id=&#34;window-安装方式&#34;&gt;window 安装方式&lt;/h3&gt;

&lt;p&gt;去 hugo release 页面下载，然后解压，把 hugo.exe 放到 D:\Software\hugo\hugo.exe,把 D:\Software\hugo\加入到 PATH，重启终端，运行 hugo version 查看版本&lt;/p&gt;

&lt;h2 id=&#34;快速搭建博客&#34;&gt;快速搭建博客&lt;/h2&gt;

&lt;p&gt;查看官方文档搭建，进入 hugo 官网，点 quick start 快速开始,从 step2-step7 照抄，
得到一个 public 目录，这就是我们的博客站点。然后部署到 github 上。hugo -server 可以预览。在 public 目录下，git init，git add .,git commit -m ,然后关联远程仓库，git remote add origin git@github.com:xxxx/x.github.io.git ,然后 git push -u origin master 推到远程仓库。然后访问 XXX.github.io 就能访问搭建成功的博客了。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>html标签入门笔记1</title>
      <link>http://localhost:1313/post/html%E6%A0%87%E7%AD%BE%E5%85%A5%E9%97%A8/</link>
      <pubDate>Mon, 12 Aug 2019 14:30:52 +0800</pubDate>
      
      <guid>http://localhost:1313/post/html%E6%A0%87%E7%AD%BE%E5%85%A5%E9%97%A8/</guid>
      
        <description>

&lt;h1 id=&#34;html-标签入门笔记-1&#34;&gt;HTML 标签入门笔记 1&lt;/h1&gt;

&lt;h2 id=&#34;html-发明者&#34;&gt;HTML 发明者&lt;/h2&gt;

&lt;p&gt;是由蒂姆·伯纳斯-李 90 年左右创造发明的，发明了一套 html,url,http 规则。&lt;/p&gt;

&lt;h2 id=&#34;html-页面起手需要写的格式&#34;&gt;HTML 页面起手需要写的格式&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;!-- 文档类型 --&amp;gt;
&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;
  &amp;lt;!-- 语言的标签，可以换成ch-ZN --&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot; /&amp;gt;
    &amp;lt;!-- 文件的字符编码 --&amp;gt;
    &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, initial-scale=1.0&amp;quot; /&amp;gt;
    &amp;lt;!-- 禁用缩放 --&amp;gt;
    &amp;lt;meta http-equiv=&amp;quot;X-UA-Compatible&amp;quot; content=&amp;quot;ie=edge&amp;quot; /&amp;gt;
    &amp;lt;!-- 兼容手机，告诉ie的版本 --&amp;gt;
    &amp;lt;title&amp;gt;Document&amp;lt;/title&amp;gt;
    &amp;lt;!-- 标题 --&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;章节标签&#34;&gt;章节标签&lt;/h2&gt;

&lt;p&gt;标题 h1-h6&lt;/p&gt;

&lt;p&gt;章节 section&lt;/p&gt;

&lt;p&gt;文章 article&lt;/p&gt;

&lt;p&gt;段落 p&lt;/p&gt;

&lt;p&gt;头部 header&lt;/p&gt;

&lt;p&gt;脚部 footer&lt;/p&gt;

&lt;p&gt;主要内容 main&lt;/p&gt;

&lt;p&gt;旁支内容 aside&lt;/p&gt;

&lt;p&gt;划分 div&lt;/p&gt;

&lt;h2 id=&#34;全局属性&#34;&gt;全局属性&lt;/h2&gt;

&lt;p&gt;所有标签都有的属性&lt;/p&gt;

&lt;p&gt;class 表示类属性&lt;/p&gt;

&lt;p&gt;contenteditable 表示可以编辑&lt;/p&gt;

&lt;p&gt;hidden 隐藏属性&lt;/p&gt;

&lt;p&gt;id 不到万不得已，不要使用，因为有 2 个标签 id 值都一样，也不会报错&lt;/p&gt;

&lt;p&gt;style 样式属性&lt;/p&gt;

&lt;p&gt;tabindex 可以使用 tab 键，上下移动。数值为 0 时，表示最后访问。为-1 表示永远访问不到&lt;/p&gt;

&lt;p&gt;title 显示内容的标签&lt;/p&gt;

&lt;h2 id=&#34;默认样式&#34;&gt;默认样式&lt;/h2&gt;

&lt;p&gt;html 会自带一些样式。因为那时候还没有 css，有些样式太难看，需要清楚样式。自定义一个 cssreset.css,如下&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}
*::before,
*::after {
  box-sizing: border-box;
}
a {
  color: inherit;
  text-decoration: none;
}
input,
button {
  font-family: inherit;
}
ol,
ul {
  list-style: none;
}
table {
  border-collapse: collapse;
  border-spacing: 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;内容标签&#34;&gt;内容标签&lt;/h2&gt;

&lt;p&gt;ol+li 有序列表内容&lt;/p&gt;

&lt;p&gt;ul+li 无序列表内容&lt;/p&gt;

&lt;p&gt;dl+dt+dd 描述内容&lt;/p&gt;

&lt;p&gt;pre 保留空格和回车&lt;/p&gt;

&lt;p&gt;hr 水平线&lt;/p&gt;

&lt;p&gt;br 换行&lt;/p&gt;

&lt;p&gt;a 链接&lt;/p&gt;

&lt;p&gt;em 语气强调&lt;/p&gt;

&lt;p&gt;strong 更加强烈的强调&lt;/p&gt;

&lt;p&gt;code 保持字体的对齐&lt;/p&gt;

&lt;p&gt;quote 行内引用&lt;/p&gt;

&lt;p&gt;blockquote 换行引用&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>github的使用</title>
      <link>http://localhost:1313/post/%E7%AC%AC%E4%BA%8C%E7%AF%87%E5%8D%9A%E5%AE%A2/</link>
      <pubDate>Sun, 11 Aug 2019 14:32:52 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E7%AC%AC%E4%BA%8C%E7%AF%87%E5%8D%9A%E5%AE%A2/</guid>
      
        <description>

&lt;h2 id=&#34;github的使用&#34;&gt;github的使用&lt;/h2&gt;

&lt;p&gt;使用远程仓库，需要先配置ssh。使用命令生产公钥和私钥，把公钥上传到github上，使用命令ssh -T git@github.com ，github会给你一个公钥确认身份
    创建一个新的仓库，使用git remote add origin git@github.com:xxx/blog-demo01.git，添加一个远程仓库地址，git push -u origin master 把本地的仓库master分支推到远程仓库上的master分支。
    有新的修改后，用git add 添加修改的文件，git commit -v 提交，最后git push 在推到远程仓库，同步。有时候别人修改了远程仓库，需要git pull，然后才能git push.
    使用git clone 命令，可以下载远程仓库到本地。&lt;/p&gt;

&lt;p&gt;搭建个人博客，需要先熟悉markdown基本语法。可以实现git+github+md+vscode实现博客的编写。yarn add global git-open，安装后使用git open 直接打开对应的参考，方便修改对应的blog.md.&lt;/p&gt;

&lt;p&gt;也可以使用hugo来搭建一个个人博客。首先下载release版本。然后配置好path路径。如目录是software/hugo/hugo.exe，则配置path路径为software/hugo就可以了，在命令行输入hugo version，显示版本就安装成功了。
安装hugo官网的7部步骤来，输入命令行。到最后的hugo命令时，还需要部署到github上。需要在生产的博客文件添加.gitignore文件，在里面输入/public/表示忽略public，里面的内容单独git init，git add ，git commit -v git remote add &amp;hellip;&amp;hellip;最后git push 上传到github仓库.hugo个人博客支持换主题，可以查找对应的换肤文档，来实现换主题功能。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>开播大吉</title>
      <link>http://localhost:1313/post/%E5%BC%80%E6%92%AD%E5%A4%A7%E5%90%89/</link>
      <pubDate>Sun, 11 Aug 2019 14:30:52 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E5%BC%80%E6%92%AD%E5%A4%A7%E5%90%89/</guid>
      
        <description>

&lt;h1 id=&#34;大家好&#34;&gt;大家好&lt;/h1&gt;

&lt;p&gt;这是第一篇博客&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>数据结构手写</title>
      <link>http://localhost:1313/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%89%8B%E5%86%99/</link>
      <pubDate>Sun, 11 Aug 2019 14:30:52 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%89%8B%E5%86%99/</guid>
      
        <description>

&lt;h1 id=&#34;自定义栈&#34;&gt;自定义栈&lt;/h1&gt;

&lt;p&gt;代码如下&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class MyStack&amp;lt;E&amp;gt; {
    private int top=-1;
    private Object[] stack;
    public MyStack(){
        stack=new Object[10];
    }

    public boolean isEmpty(){
        return top==-1;
    }

    public E push(E item){
        stack[++top]=item;
        return item;
    }

    public E peek(){
        if(isEmpty()){
            return null;
        }
        return (E)stack[top];
    }

    public E pop(){
        E e = peek();
        stack[top]=null;
        top--;
        return e;

    }

    /*
    * 栈满扩容
    *
    * */
    public void kuoRong(int size){
        int len=stack.length;
        if(size&amp;gt;len){

            Arrays.copyOf(stack,10);
        }

    }


    public E getTop(){
        if(top==-1){
            return null;
        }
        return (E)stack[top];
    }

}

&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;自定义链表&#34;&gt;自定义链表&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;public class Node {
    public int data;
    Node next=null;
    public Node(int data){
        this.data=data;
    }
}

public class OperateClass {
    public Node headNode=null;
    public Node addNode(int data){
        Node newNode = new Node(data);
        if(headNode==null){
            //头节点为空，把新节点当做头节点
            headNode=newNode;
            newNode.next=null;
            return headNode;
        }
        //节点不为空，把新节点放到头节点最后一个节点上的next位置指向
        Node tempNode=headNode;
        while (tempNode.next!=null){
            tempNode=tempNode.next;
        }
        tempNode.next=newNode;
        return headNode;


    }

    public boolean delNode(int index){
        if(index&amp;lt;1 || index&amp;gt;length()){
            return false;
        }
        if(index==1){
            //删除头节点
            headNode=headNode.next;
            return true;

        }

        Node preNode=headNode;
        //取得头节点
        Node currentNode = preNode.next;
        //头节点的下一个节点，当前节点
        int count=2;
        //计数从2开始
        while (currentNode!=null){
            if(count==index){
                //删除节点位置
                preNode.next=currentNode.next;
                //获取当前节点的在下一个节点
                return true;
            }
            preNode=currentNode;
            currentNode=currentNode.next;
            count++;
        }
        return true;


    }


    public int length(){
        int length=0;
        Node tempNode=headNode;
        while (tempNode!=null){
            length++;
            tempNode=tempNode.next;
        }
        return length;
    }

}


&lt;/code&gt;&lt;/pre&gt;
</description>
      
    </item>
    
  </channel>
</rss>
