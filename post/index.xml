<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on My Blog</title>
    <link>http://localhost:1313/post/</link>
    <description>Recent content in Posts on My Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 27 Dec 2019 13:30:52 +0800</lastBuildDate>
    
	<atom:link href="http://localhost:1313/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Vue 中的 .sync 修饰符</title>
      <link>http://localhost:1313/post/vue-%E4%B8%AD%E7%9A%84-.sync-%E4%BF%AE%E9%A5%B0%E7%AC%A6/</link>
      <pubDate>Fri, 27 Dec 2019 13:30:52 +0800</pubDate>
      
      <guid>http://localhost:1313/post/vue-%E4%B8%AD%E7%9A%84-.sync-%E4%BF%AE%E9%A5%B0%E7%AC%A6/</guid>
      <description>Vue 中的 .sync 修饰符 .sync 修饰符可以用下面的代码案例来解释。儿子花钱，要问父亲要钱的例子。 parent.vue 代码如下 &amp;lt;template&amp;gt; &amp;lt;div&amp;gt; {{total}} &amp;lt;hr&amp;gt; &amp;lt;child :money=&amp;quot;total&amp;quot; @update:money=&amp;quot;total=$event&amp;quot;/&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/template&amp;gt; &amp;lt;script&amp;gt; import Child from &#39;./child.vue&#39; export default { data(){ return { total:10000, } }, components:{Child} }</description>
    </item>
    
    <item>
      <title>Vue 两个版本的区别和使用方法</title>
      <link>http://localhost:1313/post/vue-%E4%B8%A4%E4%B8%AA%E7%89%88%E6%9C%AC%E7%9A%84%E5%8C%BA%E5%88%AB%E5%92%8C%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Tue, 24 Dec 2019 14:30:52 +0800</pubDate>
      
      <guid>http://localhost:1313/post/vue-%E4%B8%A4%E4%B8%AA%E7%89%88%E6%9C%AC%E7%9A%84%E5%8C%BA%E5%88%AB%E5%92%8C%E4%BD%BF%E7%94%A8/</guid>
      <description>Vue 两个版本的区别和使用方法 Vue 有 2 个版本，分别为 vue.js 和 vue.runtime.js vue.js 使用 template，代码如下 new Vue( { el:&#39;#app&#39;, data():{ n:0 }, template:` &amp;lt;div&amp;gt;{{n}}&amp;lt;/div&amp;gt; ` } ) vue.runtime.js使用</description>
    </item>
    
    <item>
      <title>MVC浅析</title>
      <link>http://localhost:1313/post/mvc%E6%B5%85%E6%9E%90/</link>
      <pubDate>Thu, 19 Dec 2019 14:30:52 +0800</pubDate>
      
      <guid>http://localhost:1313/post/mvc%E6%B5%85%E6%9E%90/</guid>
      <description>MVC浅析 一、MVC的三个对象 M：Model数据模式，负责操作所有数据 V：View视图，负责所有UI界面 C：Controller，控制器负责</description>
    </item>
    
    <item>
      <title>jQuery的功能</title>
      <link>http://localhost:1313/post/jquery%E7%9A%84%E5%8A%9F%E8%83%BD/</link>
      <pubDate>Mon, 28 Oct 2019 14:30:52 +0800</pubDate>
      
      <guid>http://localhost:1313/post/jquery%E7%9A%84%E5%8A%9F%E8%83%BD/</guid>
      <description>jQuery的功能 1.jQuery 如何获取元素 $(document) //选择整个文档对象 $(&#39;#myId&#39;) //选择ID为myId的网页元素 $(&#39;div.myClass&#39;) // 选择class为myClass的div元素 $(&#39;input[name=first]&#39;) // 选</description>
    </item>
    
    <item>
      <title>JS函数的执行时机</title>
      <link>http://localhost:1313/post/js%E5%87%BD%E6%95%B0%E7%9A%84%E6%89%A7%E8%A1%8C%E6%97%B6%E6%9C%BA/</link>
      <pubDate>Thu, 26 Sep 2019 14:30:52 +0800</pubDate>
      
      <guid>http://localhost:1313/post/js%E5%87%BD%E6%95%B0%E7%9A%84%E6%89%A7%E8%A1%8C%E6%97%B6%E6%9C%BA/</guid>
      <description>JS函数的执行时机 let i = 0 for(i = 0; i&amp;lt;6; i++){ setTimeout(()=&amp;gt;{ console.log(i) },0) } 上面的代码会打印出6个6。因为for循环6次后，才会执行setTimeout函数里的打印i数值6</description>
    </item>
    
    <item>
      <title>JS对象</title>
      <link>http://localhost:1313/post/js%E5%AF%B9%E8%B1%A1/</link>
      <pubDate>Sat, 21 Sep 2019 14:30:52 +0800</pubDate>
      
      <guid>http://localhost:1313/post/js%E5%AF%B9%E8%B1%A1/</guid>
      <description>JS对象 对象 定义 无序的数据激合 键值对的集合 写法 let obj={&amp;lsquo;name&amp;rsquo;:&amp;lsquo;frank&amp;rsquo;,&amp;lsquo;age&amp;rsquo;:19} let obj=new Object({&amp;lsquo;name&amp;rsquo;:&amp;lsquo;frank&amp;rsquo;,&amp;lsquo;age&amp;rsquo;:19}) 细节 键名就算引号省略了,还是字符串 删除对象的属性 delete obj[&amp;lsquo;name&amp;rsquo;] &amp;lsquo;name&amp;rsquo; in obj//表示查找obj对象</description>
    </item>
    
    <item>
      <title>JS 的基本语法</title>
      <link>http://localhost:1313/post/js-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</link>
      <pubDate>Wed, 11 Sep 2019 12:30:52 +0800</pubDate>
      
      <guid>http://localhost:1313/post/js-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</guid>
      <description>JS 的基本语法 表达式与语句 表达式 1+2 表达式的值为 3 add(1,2)表达式的值为函数的返回值 语句 var a =1 是一个语句 二者的区别 表达式一般都有值，语句有</description>
    </item>
    
    <item>
      <title>CSS 知识总结</title>
      <link>http://localhost:1313/post/css%E5%B0%8F%E7%BB%93/</link>
      <pubDate>Sun, 08 Sep 2019 14:30:52 +0800</pubDate>
      
      <guid>http://localhost:1313/post/css%E5%B0%8F%E7%BB%93/</guid>
      <description>CSS 知识总结 浏览器渲染原理 主要有如下步骤 1.根据HTML构建HTML树 2.根据CSS构建CSS树 3.将两颗树合并成一颗渲染树 4.Layout布</description>
    </item>
    
    <item>
      <title>JavaScript 的诞生</title>
      <link>http://localhost:1313/post/javascript-%E7%9A%84%E8%AF%9E%E7%94%9F/</link>
      <pubDate>Sun, 01 Sep 2019 14:30:52 +0800</pubDate>
      
      <guid>http://localhost:1313/post/javascript-%E7%9A%84%E8%AF%9E%E7%94%9F/</guid>
      <description>JavaScript 的诞生 JavaScript 因为互联网而生，紧随着浏览器的出现而问世。 Netscape 公司发现，Navigator 浏览器需要一种可以嵌入网页的脚本语言，用来控制浏览器行为。</description>
    </item>
    
    <item>
      <title>Css布局flex与grid</title>
      <link>http://localhost:1313/post/css%E5%B8%83%E5%B1%80flex%E5%92%8Cgrid/</link>
      <pubDate>Sat, 31 Aug 2019 14:30:52 +0800</pubDate>
      
      <guid>http://localhost:1313/post/css%E5%B8%83%E5%B1%80flex%E5%92%8Cgrid/</guid>
      <description>flex 布局 常用代码 display:flex; flex-direction:row/column; flex-wrap:wrap; justify-content:center/space-between; align-items:center; flex 布局小案例 html &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt; &amp;lt;title&amp;gt;JS Bin&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;header&amp;gt; &amp;lt;div class=&amp;quot;logo&amp;quot;&amp;gt; &amp;lt;img src=&amp;quot;https://static.xiedaimala.com/xdml/cdn/assets/white-logo-1a762b425df663fbccee710fe08d66951cea2fbc0a0350f03446ab30462e739f.png&amp;quot; alt=&amp;quot;&amp;quot;&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;ul&amp;gt; &amp;lt;li&amp;gt;首页&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;</description>
    </item>
    
    <item>
      <title>浅析URL</title>
      <link>http://localhost:1313/post/%E6%B5%85%E6%9E%90url/</link>
      <pubDate>Fri, 30 Aug 2019 14:30:52 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E6%B5%85%E6%9E%90url/</guid>
      <description>浅析 URL URL 构成部分 协议+域名或 IP+端口号+路径+查询字符串+锚点 URL 举例： https://www.baidu.com/s?wd=hello&amp;amp;rsv_spt=10#5 DNS 的作用 可以解析域名，通过输入域名地址，会通过 dns 解析得到 IP 地址。可</description>
    </item>
    
    <item>
      <title>html重点标签</title>
      <link>http://localhost:1313/post/html%E9%87%8D%E7%82%B9%E6%A0%87%E7%AD%BE/</link>
      <pubDate>Sat, 17 Aug 2019 14:30:52 +0800</pubDate>
      
      <guid>http://localhost:1313/post/html%E9%87%8D%E7%82%B9%E6%A0%87%E7%AD%BE/</guid>
      <description>html 重点标签 a 标签 属性 href 超链接 target href 超链接，取值可以有网站，如//google.com,也可以路径，比如/a/b/c,a/b/c,index.h</description>
    </item>
    
    <item>
      <title>hugo博客搭建</title>
      <link>http://localhost:1313/post/hugo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</link>
      <pubDate>Fri, 16 Aug 2019 14:30:52 +0800</pubDate>
      
      <guid>http://localhost:1313/post/hugo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</guid>
      <description>hugo 博客搭建 安装 hugo mac 安装方式 使用命令 brew install hugo 然后 hugo version 查看版本号是否安装成功 window 安装方式 去 hugo release 页面下载，然后解压，把 hugo.exe 放到 D:\Software\h</description>
    </item>
    
    <item>
      <title>html标签入门笔记1</title>
      <link>http://localhost:1313/post/html%E6%A0%87%E7%AD%BE%E5%85%A5%E9%97%A8/</link>
      <pubDate>Mon, 12 Aug 2019 14:30:52 +0800</pubDate>
      
      <guid>http://localhost:1313/post/html%E6%A0%87%E7%AD%BE%E5%85%A5%E9%97%A8/</guid>
      <description>HTML 标签入门笔记 1 HTML 发明者 是由蒂姆·伯纳斯-李 90 年左右创造发明的，发明了一套 html,url,http 规则。 HTML 页面起手需要写的格式 &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;!-- 文档类型 --&amp;gt; &amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt; &amp;lt;!-- 语言的标签，可</description>
    </item>
    
    <item>
      <title>github的使用</title>
      <link>http://localhost:1313/post/%E7%AC%AC%E4%BA%8C%E7%AF%87%E5%8D%9A%E5%AE%A2/</link>
      <pubDate>Sun, 11 Aug 2019 14:32:52 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E7%AC%AC%E4%BA%8C%E7%AF%87%E5%8D%9A%E5%AE%A2/</guid>
      <description>github的使用 使用远程仓库，需要先配置ssh。使用命令生产公钥和私钥，把公钥上传到github上，使用命令ssh -T git@github.com ，github会给你</description>
    </item>
    
    <item>
      <title>开播大吉</title>
      <link>http://localhost:1313/post/%E5%BC%80%E6%92%AD%E5%A4%A7%E5%90%89/</link>
      <pubDate>Sun, 11 Aug 2019 14:30:52 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E5%BC%80%E6%92%AD%E5%A4%A7%E5%90%89/</guid>
      <description>大家好 这是第一篇博客</description>
    </item>
    
    <item>
      <title>数据结构手写</title>
      <link>http://localhost:1313/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%89%8B%E5%86%99/</link>
      <pubDate>Sun, 11 Aug 2019 14:30:52 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%89%8B%E5%86%99/</guid>
      <description>自定义栈 代码如下 public class MyStack&amp;lt;E&amp;gt; { private int top=-1; private Object[] stack; public MyStack(){ stack=new Object[10]; } public boolean isEmpty(){ return top==-1; } public E push(E item){ stack[++top]=item; return item; } public E peek(){ if(isEmpty()){ return null; } return (E)stack[top]; } public E pop(){ E e = peek(); stack[top]=null; top--; return e; } /* * 栈满扩容 * * */ public void</description>
    </item>
    
    <item>
      <title>测试</title>
      <link>http://localhost:1313/post/%E6%B5%8B%E8%AF%95/</link>
      <pubDate>Sun, 11 Aug 2019 14:30:52 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E6%B5%8B%E8%AF%95/</guid>
      <description>大家好 这是测试博客</description>
    </item>
    
  </channel>
</rss>